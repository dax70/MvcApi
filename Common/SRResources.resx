<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionMethodSelector_AmbiguousMatch" xml:space="preserve">
    <value>Multiple actions were found that match the request: {0}</value>
  </data>
  <data name="ActionMethodSelector_AmbiguousMatchType" xml:space="preserve">
    <value>{0} on type {1}</value>
  </data>
  <data name="ApiControllerActionSelector_ActionNameNotFound" xml:space="preserve">
    <value>No action was found on the controller '{0}' that matches the name '{1}'.</value>
  </data>
  <data name="ApiControllerActionSelector_ActionNotFound" xml:space="preserve">
    <value>No action was found on the controller '{0}' that matches the request.</value>
  </data>
  <data name="ApiControllerActionSelector_AmbiguousMatch" xml:space="preserve">
    <value>Multiple actions were found that match the request: {0}</value>
  </data>
  <data name="ApiControllerActionSelector_HttpMethodNotSupported" xml:space="preserve">
    <value>The requested resource does not support http method '{0}'.</value>
  </data>
  <data name="ArgumentEmptyString" xml:space="preserve">
    <value>The value cannot be null or empty.</value>
  </data>
  <data name="AsyncCommon_AsyncResultAlreadyConsumed" xml:space="preserve">
    <value>The provided IAsyncResult has already been consumed.</value>
  </data>
  <data name="AsyncCommon_InvalidAsyncResult" xml:space="preserve">
    <value>The provided IAsyncResult is not valid for this method.</value>
  </data>
  <data name="CannotHaveNullInList" xml:space="preserve">
    <value>A null '{0}' is not valid.</value>
  </data>
  <data name="CannotUseMediaRangeForSupportedMediaType" xml:space="preserve">
    <value>The '{0}' of '{1}' cannot be used as a supported media type because it is a media range.</value>
  </data>
  <data name="Common_NullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or empty.</value>
  </data>
  <data name="HttpMethodFormatError" xml:space="preserve">
    <value>The format of the HTTP method is invalid.</value>
  </data>
  <data name="HttpStatusDescriptionFormatError" xml:space="preserve">
    <value>The reason phrase must not contain new-line characters.</value>
  </data>
  <data name="InvalidMediaRange" xml:space="preserve">
    <value>The value '{0}' is not a valid media range.</value>
  </data>
  <data name="LogError" xml:space="preserve">
    <value>[Error/{0}] {1}</value>
  </data>
  <data name="LogFatal" xml:space="preserve">
    <value>[Fatal/{0}] {1}</value>
  </data>
  <data name="LogInfo" xml:space="preserve">
    <value>[Info/{0}] {1}</value>
  </data>
  <data name="LogWarn" xml:space="preserve">
    <value>[Warn/{0}] {1}</value>
  </data>
  <data name="MediaTypeMustBeSetBeforeWrite" xml:space="preserve">
    <value>'{0}' must be set before '{1}' can serialize its content.</value>
  </data>
  <data name="NonNullUriRequiredForMediaTypeMapping" xml:space="preserve">
    <value>A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.</value>
  </data>
  <data name="NoWriteSerializerAvailable" xml:space="preserve">
    <value>No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</value>
  </data>
  <data name="Resources_UnsupportedMediaType" xml:space="preserve">
    <value>Unsupported Media Type: '{0}'.</value>
  </data>
  <data name="ResponseMustReferenceRequest" xml:space="preserve">
    <value>The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</value>
  </data>
  <data name="ResultLimitFilter_InvalidActionDescriptor" xml:space="preserve">
    <value>ResultLimitAttribute cannot be applied to a non ReflectedActionDescriptor type.</value>
    <comment>This can occur if you have implemented or overriden your own IActionInvoker.</comment>
  </data>
  <data name="ResultLimitFilter_InvalidReturnType" xml:space="preserve">
    <value>ResultLimitAttribute cannot be applied to action '{0}' because it's return type is not IEnumerable.</value>
  </data>
  <data name="ResultLimitFilter_OutOfRange" xml:space="preserve">
    <value>The limit specified by the ResultLimitAttribute applied to action '{0}' must be greater than zero.</value>
  </data>
  <data name="SerializerCannotSerializeType" xml:space="preserve">
    <value>The '{0}' serializer cannot serialize the type '{1}'.</value>
  </data>
  <data name="MediaTypeFormatterNoEncoding" xml:space="preserve">
    <value>No encoding found for media type formatter '{0}'. There must be at least one supported encoding registered in order for the media type formatter to read or write content.</value>
  </data>
  <data name="ParseErrorInClause" xml:space="preserve">
    <value>Parse error in {0}. {1}</value>
  </data>
  <data name="PositiveIntegerExpectedForODataQueryParameter" xml:space="preserve">
    <value>The OData query parameter '{0}' has an invalid value. The value should be a positive integer. The provided value was '{1}'</value>
  </data>
  <data name="Common_TypeMustDriveFromType" xml:space="preserve">
    <value>The type {0} must derive from {1}.</value>
  </data>
  <data name="DefaultServices_InvalidServiceType" xml:space="preserve">
    <value>The service type {0} is not supported.</value>
  </data>
  <data name="DependencyResolverNoService" xml:space="preserve">
    <value>No service registered for type '{0}'.</value>
  </data>
  <data name="ArgumentMustBeLessThanOrEqualTo" xml:space="preserve">
    <value>Value must be less than or equal to {0}.</value>
  </data>
  <data name="ArgumentMustBeGreaterThanOrEqualTo" xml:space="preserve">
    <value>Value must be greater than or equal to {0}.</value>
  </data>
</root>